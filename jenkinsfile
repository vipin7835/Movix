pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS = 'git_credential'
        SSH_CREDENTIALS = 'ssh_ubuntu_server'
        REMOTE_SERVER = 'ubuntu@3.92.198.160' // Update with your server IP
        DOCKER_IMAGE = 'movix_app'
        REMOTE_DIR = '/var/www/html/movix'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git credentialsId: GITHUB_CREDENTIALS, url: 'https://github.com/vipin7835/Movix.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Run Docker Container Locally') {
            steps {
                script {
                    // Stop and remove any existing container locally
                    sh "docker stop ${DOCKER_IMAGE} || true"
                    sh "docker rm ${DOCKER_IMAGE} || true"

                    // Run the Docker container locally (optional, can be removed if not needed)
                    sh "docker run -d -p 80:80 --name ${DOCKER_IMAGE} ${DOCKER_IMAGE}"
                }
            }
        }

        stage('Deploy to Remote Server') {
            steps {
                sshagent (credentials: [SSH_CREDENTIALS]) {
                    // Copy the Docker image to the remote server
                    sh "docker save ${DOCKER_IMAGE} | gzip | ssh -o StrictHostKeyChecking=no ${REMOTE_SERVER} 'gunzip | sudo docker load'"
                    
                    // Restart the container on the remote server
                    sh """
                        ssh -o StrictHostKeyChecking=no ${REMOTE_SERVER} '
                            sudo docker stop ${DOCKER_IMAGE} || true;
                            sudo docker rm ${DOCKER_IMAGE} || true;
                            sudo docker run -d -p 80:80 --name ${DOCKER_IMAGE} ${DOCKER_IMAGE}
                        '
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment was successful!'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}
